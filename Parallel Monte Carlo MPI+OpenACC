#include <iostream>
#include <random>
#include <cmath>
#include <mpi.h>
#include <openacc.h>

using namespace std;

double estimate_pi(int num_samples) {
  default_random_engine generator;
  uniform_real_distribution<double> distribution(-1.0, 1.0);
  int num_inside_circle = 0;

  #pragma acc parallel loop reduction(+:num_inside_circle) present(generator, distribution)
  for (int i = 0; i < num_samples; i++) {
    double x = distribution(generator);
    double y = distribution(generator);
    if (sqrt(x*x + y*y) < 1.0) {
      num_inside_circle++;
    }
  }

  return 4.0 * num_inside_circle / num_samples;
}

int main(int argc, char* argv[]) {
  int rank, size;
  int num_samples = 1000000;
  double pi_estimate;

  MPI_Init(&argc, &argv);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  MPI_Comm_size(MPI_COMM_WORLD, &size);

  // Distribute number of samples to all processes
  MPI_Bcast(&num_samples, 1, MPI_INT, 0, MPI_COMM_WORLD);

  // Each process performs a portion of the Monte Carlo simulation using OpenACC
  pi_estimate = estimate_pi(num_samples / size);

  // Aggregate the results from all processes to compute the final estimate of pi on process 0
  MPI_Reduce(&pi_estimate, &pi_estimate, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

  if (rank == 0) {
    pi_estimate /= size;
    cout << "Estimated value of pi = " << pi_estimate << endl;
  }

  MPI_Finalize();
  return 0;
}
