#include <stdio.h>
#include <stdlib.h>
#include <curand_kernel.h>

#define N 1000000
#define BLOCK_SIZE 256

__global__ void pi_estimate_kernel(curandState *states, int *count) {
    int tid = threadIdx.x + blockIdx.x * blockDim.x;
    curand_init(1234, tid, 0, &states[tid]);
    float x, y;
    for (int i = 0; i < N/BLOCK_SIZE; i++) {
        x = curand_uniform(&states[tid]);
        y = curand_uniform(&states[tid]);
        if (x * x + y * y < 1) {
            atomicAdd(count, 1);
        }
    }
}

int main() {
    int *d_count, h_count = 0;
    curandState *d_states;
    cudaMalloc(&d_count, sizeof(int));
    cudaMalloc(&d_states, BLOCK_SIZE * sizeof(curandState));
    cudaMemset(d_count, 0, sizeof(int));
    pi_estimate_kernel<<<N/BLOCK_SIZE, BLOCK_SIZE>>>(d_states, d_count);
    cudaMemcpy(&h_count, d_count, sizeof(int), cudaMemcpyDeviceToHost);
    printf("Estimated value of pi is: %f\n", 4.0 * h_count / N);
    cudaFree(d_count);
    cudaFree(d_states);
    return 0;
}
